// Generated by CoffeeScript 2.2.1
var Response, _, contentDisposition, xml2js;

contentDisposition = require('content-disposition');

xml2js = require("xml2js");

_ = require('underscore');

Response = (function() {
  class Response {
    // constuctor
    constructor(_response) {
      this._response = _response;
      if (this._response === void 0) {
        throw new Error('Requires response');
      }
      return;
    }

    isError() {
      if (this.code !== null) {
        return true;
      }
      return false;
    }

    parseFile(buffer, cb) {
      var disposition, filename;
      if (!buffer && Buffer.isBuffer(buffer)) {
        throw new Error('Requires buffer');
      }
      if (!cb) {
        throw new Error('Requires callback');
      }
      disposition = contentDisposition.parse(this._response.headers['content-disposition']);
      filename = disposition.parameters.filename;
      this._data = this.data = {
        filename: filename,
        buffer: buffer
      };
      return cb(null, this);
    }

    parseBody(body, cb) {
      if (!body) {
        throw new Error('Requires body');
      }
      if (!cb) {
        throw new Error('Requires callback');
      }
      this._data = body;
      return xml2js.parseString(this._data, (err, data) => {
        var error, record, ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, success;
        if (err) {
          return cb(err, null);
        } else {
          this.data = data;
          if ((ref = this.data) != null ? (ref1 = ref.response) != null ? ref1.error : void 0 : void 0) {
            error = this.data.response.error;
            if (_.isArray(error)) {
              error = _.first(error);
            }
            if (error != null ? error.code : void 0) {
              this.code = error.code;
            }
            if (error != null ? error.message : void 0) {
              this.message = error.message;
            } else {
              this.message = "Unknown Error";
            }
            return cb({
              code: this.code,
              message: this.message
            }, this);
          } else if ((ref2 = this.data) != null ? (ref3 = ref2.response) != null ? ref3.nodata : void 0 : void 0) {
            error = this.data.response.nodata;
            if (_.isArray(error)) {
              error = _.first(error);
            }
            if (error != null ? error.code : void 0) {
              this.code = error.code;
              if (_.isArray(this.code)) {
                this.code = _.first(this.code);
              }
            }
            if (error != null ? error.message : void 0) {
              this.message = error.message;
              if (_.isArray(this.message)) {
                this.message = _.first(this.message);
              }
            } else {
              this.message = "Unknown Error";
            }
            return cb(null, this);
          } else {
            if ((ref4 = this.data) != null ? (ref5 = ref4.response) != null ? ref5.result : void 0 : void 0) {
              if (_.isArray((ref6 = this.data) != null ? (ref7 = ref6.response) != null ? ref7.result : void 0 : void 0) && ((ref8 = this.data) != null ? (ref9 = ref8.response) != null ? ref9.result.length : void 0 : void 0) === 1) {
                record = _.first((ref10 = this.data) != null ? (ref11 = ref10.response) != null ? ref11.result : void 0 : void 0);
                if (record != null ? record.message : void 0) {
                  this.message = record.message;
                }
                if (record != null ? record.recorddetail : void 0) {
                  this.data = record.recorddetail;
                } else {
                  this.data = record;
                }
              } else {
                return cb(new Error("Multi result arrays not handled"), this);
              }
            } else if ((ref12 = this.data) != null ? (ref13 = ref12.response) != null ? ref13.success : void 0 : void 0) {
              success = this.data.response.success;
              if (_.isArray(success)) {
                success = _.first(success);
              }
              if (success != null ? success.code : void 0) {
                this.code = success.code;
                if (_.isArray(this.code)) {
                  this.code = _.first(this.code);
                }
              }
              if (success != null ? success.message : void 0) {
                this.message = success.message;
                if (_.isArray(this.message)) {
                  this.message = _.first(this.message);
                }
              } else {
                this.message = "Unknown Success";
              }
              this.data = {
                'success': {
                  'code': this.code,
                  'message': this.message
                }
              };
            }
            return cb(null, this);
          }
        }
      });
    }

  };

  // instance values
  Response.prototype.message = null;

  Response.prototype.type = null;

  Response.prototype.data = null;

  Response.prototype.code = null;

  Response.prototype._response = null;

  Response.prototype._data = null;

  return Response;

}).call(this);

module.exports = Response;

// Generated by CoffeeScript 2.2.1
var BaseModule, CrmModule, Request, _, xml2js;

_ = require('underscore');

xml2js = require("xml2js");

BaseModule = require('../../base-module');

Request = require('../../request');

CrmModule = class CrmModule extends BaseModule {
  buildRecord(record) {
    var k, result, v;
    if (!_.isObject(record)) {
      throw new Error('Object required');
    }
    result = [];
    for (k in record) {
      v = record[k];
      if (Array.isArray(v)) {
        // FIXME: tbd how to pass nested tag name, currently hardcoded to "project"
        result.push({
          $: {
            val: k
          },
          product: this.buildRecords(v)
        });
      } else {
        if (typeof v === 'undefined') {
          v = '';
        }
        result.push({
          $: {
            val: k
          },
          _: v
        });
      }
    }
    return result;
  }

  build(records) {
    var xmlBuilder, xmlObj, xmlString;
    xmlBuilder = new xml2js.Builder({
      rootName: this.name,
      renderOpts: {
        pretty: false
      },
      xmldec: {
        version: "1.0",
        encoding: "UTF-8"
      }
    });
    xmlObj = {
      row: this.buildRecords(records)
    };
    xmlString = xmlBuilder.buildObject(xmlObj);
    return xmlString;
  }

  buildRecords(records) {
    var index, j, len, options, record, record_result, row, rows;
    if (!_.isArray(records)) {
      throw new Error('Requires array of records');
    }
    rows = [];
    for (index = j = 0, len = records.length; j < len; index = ++j) {
      record = records[index];
      record_result = this.buildRecord(record);
      options = _.extend({
        type: 'FL'
      }, record._options);
      row = {
        $: {
          no: index + 1
        }
      };
      row[options.type] = record_result;
      rows.push(row);
    }
    return rows;
  }

  processRecord(record) {
    var fl, i, k, r, ref, ref1, result, v;
    result = {};
    if (_.isArray(record)) {
      for (i in record) {
        r = record[i];
        _.extend(result, this.processRecord(r));
      }
    } else if (_.isObject(record)) {
      if (_.has(record, 'FL')) {
        for (k in record) {
          v = record[k];
          if (k === 'FL') {
            for (i in v) {
              fl = v[i];
              if ((fl != null ? (ref = fl.$) != null ? ref.val : void 0 : void 0) && (fl != null ? fl._ : void 0)) {
                result[fl.$.val] = fl._;
              }
            }
          }
        }
      } else if (_.has(record, 'success')) {
        if (record != null ? (ref1 = record.success) != null ? ref1.code : void 0 : void 0) {
          _.extend(result, record);
        } else {
          record = record.success;
          for (k in record) {
            v = record[k];
            if (k === 'Contact' || k === 'Potential') {
              result[k] = {};
              _.each(v, (_v) => {
                return _.extend(result[k], this.processRecord(_v));
              });
            }
          }
        }
      } else if (_.has(record, '_') && _.has(record, '$') && _.has(record.$, 'param')) {
        result[record.$.param] = record._;
      } else if (_.has(record, '_') && _.has(record, '$') && _.has(record.$, 'val')) {
        result[record.$.val] = record._;
      }
    }
    return result;
  }

  processFields(record) {
    var _val, c, field, fl, i, ref, result, val;
    result = {};
    if (_.isObject(record)) {
      if (_.has(record, 'FL')) {
        result = record.$;
        result.fields = [];
        ref = record.FL;
        for (i in ref) {
          fl = ref[i];
          field = fl.$;
          if (_.has(fl, 'val')) {
            _val = fl.val;
            field.val = [];
            for (c in _val) {
              val = _val[c];
              if (_.has(val, '_')) {
                if (_.has(val, '$')) {
                  if (val['$'].default) {
                    field.default = val['_'];
                  }
                }
                field.val.push(val['_']);
              } else {
                field.val.push(val);
              }
            }
          }
          result.fields.push(field);
        }
      }
    }
    return result;
  }

  getFields(_query, cb) {
    var options, query, request, url;
    query = _.extend({
      newFormat: 1
    }, _query);
    options = {
      method: 'GET'
    };
    url = this.buildUrl(query, ['getFields'], options);
    request = new Request(this, url);
    return request.request((err, response) => {
      var _data, processed, row;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        _data = response.data;
        response.data = Array();
        if (_data != null ? _data[this.name] : void 0) {
          for (row in _data[this.name].section) {
            processed = this.processFields(_data[this.name].section[row]);
            if (processed) {
              response.data.push(processed);
            }
          }
        }
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
  }

  getRecords(_query, cb) {
    var options, query, request, url;
    query = _.extend({
      newFormat: 1
    }, _query);
    options = {
      method: 'GET'
    };
    url = this.buildUrl(query, ['getRecords'], options);
    request = new Request(this, url);
    return request.request((err, response) => {
      var _data, processed, row;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        _data = response.data;
        response.data = Array();
        if (_data != null ? _data[this.name] : void 0) {
          for (row in _data[this.name][0].row) {
            processed = this.processRecord(_data[this.name][0].row[row]);
            if (processed) {
              response.data.push(processed);
            }
          }
        }
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
  }

  getMyRecords(_query, cb) {
    var options, query, request, url;
    query = _.extend({
      newFormat: 1
    }, _query);
    options = {
      method: 'GET'
    };
    url = this.buildUrl(query, ['getMyRecords'], options);
    request = new Request(this, url);
    return request.request((err, response) => {
      var _data, processed, row;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        _data = response.data;
        response.data = Array();
        if (_data != null ? _data[this.name] : void 0) {
          for (row in _data[this.name][0].row) {
            processed = this.processRecord(_data[this.name][0].row[row]);
            if (processed) {
              response.data.push(processed);
            }
          }
        }
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
  }

  deleteRecords(id, cb) {
    var options, query, request, url;
    if (!id) {
      throw new Error('Requires an Id to delete');
    }
    query = {
      id: id,
      newFormat: 1
    };
    options = {
      method: 'GET'
    };
    url = this.buildUrl(query, ['deleteRecords'], options);
    request = new Request(this, url);
    return request.request((err, response) => {
      var processed;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        processed = this.processRecord({
          success: response.data
        });
        response.data = processed;
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
  }

  getRecordById(id, cb) {
    var options, query, request, url;
    if (!id) {
      throw new Error('Requires an Id to fetch');
    }
    query = {
      id: id,
      newFormat: 1
    };
    options = {
      method: 'GET'
    };
    url = this.buildUrl(query, ['getRecordById'], options);
    request = new Request(this, url);
    return request.request((err, response) => {
      var processed, ref, ref1, row;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        if ((ref = response.data) != null ? ref[this.name] : void 0) {
          row = _.first((ref1 = response.data) != null ? ref1[this.name] : void 0);
          processed = this.processRecord(_.first(row.row));
          response.data = processed;
        }
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
  }

  getSearchRecords(_query, cb) {
    var options, query, request, url;
    if (!_.isObject(_query)) {
      throw new Error('Requires a query object');
    }
    query = _.extend({
      newFormat: 1,
      selectColumns: 'All'
    }, _query);
    if (!query.searchCondition) {
      throw new Error('Requires a searchCondition to fetch');
    }
    options = {
      method: 'GET'
    };
    url = this.buildUrl(query, ['getSearchRecords'], options);
    request = new Request(this, url);
    return request.request((err, response) => {
      var _data, processed, row;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        _data = response.data;
        response.data = Array();
        if (_data != null ? _data[this.name] : void 0) {
          for (row in _data[this.name][0].row) {
            processed = this.processRecord(_data[this.name][0].row[row]);
            if (processed) {
              response.data.push(processed);
            }
          }
        }
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
  }

  searchRecords(_query, cb) {
    var options, query, request, url;
    if (!_.isObject(_query)) {
      throw new Error('Requires a query object');
    }
    query = _.extend({
      newFormat: 1,
      selectColumns: 'All'
    }, _query);
    if (!query.criteria) {
      throw new Error('Requires a criteria to fetch');
    }
    options = {
      method: 'GET'
    };
    url = this.buildUrl(query, ['searchRecords'], options);
    request = new Request(this, url);
    return request.request((err, response) => {
      var _data, processed, row;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        _data = response.data;
        response.data = Array();
        if (_data != null ? _data[this.name] : void 0) {
          for (row in _data[this.name][0].row) {
            processed = this.processRecord(_data[this.name][0].row[row]);
            if (processed) {
              response.data.push(processed);
            }
          }
        }
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
  }

  insertRecords(records, _query, cb) {
    var options, query, request, url;
    if (!_.isArray(records)) {
      throw new Error('Requires array of records');
    }
    if (records.length < 1) {
      throw new Error('Requires as least one record');
    }
    if (_.isFunction(_query)) {
      cb = _query;
      _query = {};
    }
    query = _.extend({
      newFormat: 1,
      xmlData: this.build(records)
    }, _query);
    options = {
      method: 'POST'
    };
    url = this.buildUrl(query, ['insertRecords'], options);
    request = new Request(this, url);
    return request.request((err, response) => {
      var processed, record;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        if (_.isArray(response.data)) {
          processed = (function() {
            var j, len, ref, results;
            ref = response.data;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              record = ref[j];
              results.push(this.processRecord(record));
            }
            return results;
          }).call(this);
        }
        response.data = processed;
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
  }

  updateRecords(id, records, cb) {
    var options, query, request, url;
    if (!id) {
      throw new Error('Requires an Id to fetch');
    }
    if (!_.isObject(records)) {
      throw new Error('Requires record object');
    }
    query = {
      newFormat: 1,
      id: id,
      xmlData: this.build(records)
    };
    options = {
      method: 'POST'
    };
    url = this.buildUrl(query, ['updateRecords'], options);
    request = new Request(this, url);
    return request.request((err, response) => {
      var processed;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        processed = this.processRecord(response.data);
        response.data = processed;
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
  }

  uploadFile(id, file, descriptor, cb) {
    var form, options, query, r, request, url;
    query = {};
    options = {
      method: 'POST'
    };
    url = this.buildUrl(query, ['uploadFile'], options);
    request = new Request(this, url);
    r = request.request((err, response) => {
      var processed;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        processed = this.processRecord(response.data);
        response.data = processed;
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
    form = r.form();
    form.append('id', id);
    if (descriptor) {
      form.append('content', file, descriptor);
    } else {
      form.append('attachmentUrl', file);
    }
    return r;
  }

  deleteFile(id, cb) {
    var form, options, query, r, request, url;
    query = {};
    options = {
      method: 'POST'
    };
    url = this.buildUrl(query, ['deleteFile'], options);
    request = new Request(this, url);
    r = request.request((err, response) => {
      var processed;
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        processed = this.processRecord(response.data);
        response.data = processed;
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
    form = r.form();
    form.append('id', id);
    return r;
  }

  downloadFile(id, cb) {
    var options, query, r, request, url;
    if (!id) {
      throw new Error('Requires id to download');
    }
    query = {
      id: id
    };
    options = {
      method: 'POST'
    };
    url = this.buildUrl(query, ['downloadFile'], options);
    request = new Request(this, url);
    r = request.request(function(err, response) {
      if (err) {
        if (_.isFunction(cb)) {
          return cb(err, null);
        }
      } else {
        if (_.isFunction(cb)) {
          return cb(null, response);
        }
      }
    });
    return r;
  }

  uploadPhoto(id, file, descriptor, cb) {
    var form, options, query, r, request, url;
    if (this.name === 'Contacts' || this.name === 'Leads') {
      query = {};
      options = {
        method: 'POST'
      };
      url = this.buildUrl(query, ['uploadPhoto'], options);
      request = new Request(this, url);
      r = request.request((err, response) => {
        var processed;
        if (err) {
          if (_.isFunction(cb)) {
            return cb(err, null);
          }
        } else {
          processed = this.processRecord(response.data);
          response.data = processed;
          if (_.isFunction(cb)) {
            return cb(null, response);
          }
        }
      });
      form = r.form();
      form.append('id', id);
      form.append('content', file, descriptor);
      return r;
    } else {
      throw new Error('Not available');
    }
  }

};

module.exports = CrmModule;

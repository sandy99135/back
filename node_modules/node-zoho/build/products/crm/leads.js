// Generated by CoffeeScript 2.2.1
var CrmModule, Leads, Request, _;

_ = require('underscore');

CrmModule = require('./crm-module');

Request = require('../../request');

Leads = (function() {
  class Leads extends CrmModule {
    getMyRecords() {
      throw new Error('Not Implemented');
    }

    getSearchRecordsByPDC() {
      throw new Error('Not Implemented');
    }

    deleteRecords() {
      throw new Error('Not Implemented');
    }

    convertLead(lead_id, options, cb) {
      var defaults, query, records, request, url;
      if (!lead_id) {
        throw new Error('Requires a Lead Id');
      }
      if (!options) {
        throw new Error('Requires an options');
      }
      defaults = {
        createPotential: false,
        assignTo: '',
        notifyLeadOwner: true,
        notifyNewEntityOwner: true
      };
      _.defaults(options, defaults);
      records = [_.pick(options, ['createPotential', 'assignTo', 'notifyLeadOwner', 'notifyNewEntityOwner'])];
      if (options.createPotential === true && !_.isObject(options.potential)) {
        throw new Error('Requires a potential');
      } else if (options.createPotential === true) {
        records.push(options.potential);
      }
      query = {
        leadId: lead_id,
        newFormat: 1,
        xmlData: this.build(records)
      };
      options = {
        method: 'POST'
      };
      url = this.buildUrl(query, ['convertLead'], options);
      request = new Request(this, url);
      return request.request((err, response) => {
        var processed;
        if (err) {
          if (_.isFunction(cb)) {
            return cb(err, null);
          }
        } else {
          processed = this.processRecord(response.data);
          response.data = processed;
          if (_.isFunction(cb)) {
            return cb(null, response);
          }
        }
      });
    }

    getRelatedRecords() {
      throw new Error('Not Implemented');
    }

    updateRelatedRecords() {
      throw new Error('Not Implemented');
    }

    getUsers() {
      throw new Error('Not Implemented');
    }

    downloadPhoto() {
      throw new Error('Not Implemented');
    }

    deletePhoto() {
      throw new Error('Not Implemented');
    }

  };

  Leads.prototype.name = 'Leads';

  return Leads;

}).call(this);

module.exports = Leads;
